pytest test_abs_project.py - Запуск файла с тестами

-------------------------------------------------

Правила запуска тестов PyTest

1) если мы не передали никакого аргумента в команду, а написали просто pytest, тест-раннер начнёт поиск в текущей директории

2) как аргумент можно передать файл, путь к директории или любую комбинацию директорий и файлов, например: 

pytest scripts/selenium_scripts
# найти все тесты в директории scripts/selenium_scripts

pytest test_user_interface.py
# найти и выполнить все тесты в файле 

pytest scripts/drafts.py::test_register_new_user_parametrized
# найти тест с именем test_register_new_user_parametrized в указанном файле в указанной директории и выполнить 

3) дальше происходит рекурсивный поиск: то есть PyTest обойдет все вложенные директории

  - во всех директориях PyTest ищет файлы, которые удовлетворяют правилу  test_*.py или *_test.py (то есть начинаются на test_ или заканчиваются _test и имеют 
  	расширение .py)

  - внутри всех этих файлов находит тестовые функции по следующему правилу:

	все тесты, название которых начинается с test, которые находятся вне классов

	все тесты, название которых начинается с test внутри классов, имя которых начинается с Test (и без метода __init__ внутри класса)

--------------------------------------------------------

Если запустить PyTest с параметром -v (verbose, то есть подробный), то в отчёт добавится дополнительная информация со списком тестов и статусом их прохождения: 

lesson14_step12.py::TestAbs::test_registration1 PASSED																									[ 50%]
lesson14_step12.py::TestAbs::test_registration2 FAILED																									[100%]


pytest -v --tb=no lesson14_step12.py  - Разыернутый отчет без текста traceback

				collected 2 items                                                                                                                                                                                                                 

				lesson14_step12.py::TestAbs::test_registration1 PASSED											[ 50%]
				lesson14_step12.py::TestAbs::test_registration2 FAILED											[100%]

				===================================================================================================== short test summary info =====================================================================================================
				FAILED lesson14_step12.py::TestAbs::test_registration2 - selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {"method":"css selector","selector":".first_block input.second"}
				================================================================================================== 1 failed, 1 passed in 28.37s ===================================================================================================
				(venv) dan@dan-HP-Laptop-15s-eq1xxx:~/home/programming/stepik_course_python_selenium$ pytest -v --tb=no lesson14_step12.py 

----------------------------------------------------------

Если нужно проверить, что тест вызывает ожидаемое исключение (довольно редкая ситуация для UI-тестов, и вам этот способ, скорее всего, никогда не пригодится), мы можем использовать специальную конструкцию with pytest.raises(). Например, можно проверить, что на странице сайта не должен отображаться какой-то элемент:

				import pytest

				from selenium import webdriver
				from selenium.common.exceptions import NoSuchElementException


				def test_exception1():
				    try:
				        browser = webdriver.Chrome()
				        browser.get("http://selenium1py.pythonanywhere.com/")
				        with pytest.raises(NoSuchElementException):
				            browser.find_element_by_css_selector("button.btn")
				            pytest.fail("Не должно быть кнопки Отправить")
				    finally: 
				        browser.quit()


				def test_exception2():
				    try:
				        browser = webdriver.Chrome()
				        browser.get("http://selenium1py.pythonanywhere.com/")
				        with pytest.raises(NoSuchElementException):
				            browser.find_element_by_css_selector("no_such_button.btn")
				            pytest.fail("Не должно быть кнопки Отправить")
				    finally: 
				        browser.quit()

				----------------


				def test_exception_expectation():								# test_pytest_abs.py::test_exception_expectation PASSED 
				    with pytest.raises(TypeError):
				        raise TypeError

				def test_exception_expectation():								# test_pytest_abs.py::test_exception_expectation FAILED  
				    with pytest.raises(TypeError):
				        # raise ZeroDivisionError
				        raise TypeError

-------------------------------

Фикстуры в контексте PyTest — это вспомогательные функции для наших тестов, которые не являются частью тестового сценария.

Классический способ работы с фикстурами — создание setup- и teardown-методов в файле с тестами


				def setup_module(module):
				    """ setup any state specific to the execution of the given module."""


				def teardown_module(module):
				    """teardown any state that was previously setup with a setup_module
				    method.
				    """
-----------

				@classmethod
				def setup_class(cls):
				    """setup any state specific to the execution of the given class (which
				    usually contains tests).
				    """


				@classmethod
				def teardown_class(cls):
				    """teardown any state that was previously setup with a call to
				    setup_class.
				    """

-----------

				def setup_method(self, method):
				    """setup any state tied to the execution of the given method in a
				    class.  setup_method is invoked for every test method of a class.
				    """


				def teardown_method(self, method):
				    """teardown any state that was previously setup with a setup_method
				    call.
				    """

-----------

				def setup_function(function):
				    """setup any state tied to the execution of the given function.
				    Invoked for every test function in the module.
				    """


				def teardown_function(function):
				    """teardown any state that was previously setup with a setup_function
				    call.
    """

------------------------------------------------------------

				class TestMainPage1():

				    @classmethod
				    def setup_class(self): 										# Вызывается один раз при вызове класса
				        print("\nstart browser for test suite..")
				        self.browser = webdriver.Chrome()

				    @classmethod 												# Вызывается один раз при вызове класса
				    def teardown_class(self):
				        print("quit browser for test suite..")
				        self.browser.quit()

				    def test_guest_should_see_login_link(self):
				        self.browser.get(link)
				        self.browser.find_element_by_css_selector("#login_link")

				    def test_guest_should_see_basket_link_on_the_main_page(self):
				        self.browser.get(link)
				        self.browser.find_element_by_css_selector(".basket-mini .btn-group > a")


				class TestMainPage2():

				    def setup_method(self): 									# Вызывается при вызове каждого метода класса
				        print("start browser for test..")
				        self.browser = webdriver.Chrome()

				    def teardown_method(self): 									# Вызывается при вызове каждого метода класса
				        print("quit browser for test..")
				        self.browser.quit()

				    def test_guest_should_see_login_link(self):
				        self.browser.get(link)
				        self.browser.find_element_by_css_selector("#login_link")

				    def test_guest_should_see_basket_link_on_the_main_page(self):
				        self.browser.get(link)
				        self.browser.find_element_by_css_selector(".basket-mini .btn-group > a")



test_fixture.py::TestMainPage1::test_guest_should_see_login_link											PASSED								[ 25%]
test_fixture.py::TestMainPage1::test_guest_should_see_basket_link_on_the_main_page							PASSED								[ 50%]
test_fixture.py::TestMainPage2::test_guest_should_see_login_link											PASSED								[ 75%]
test_fixture.py::TestMainPage2::test_guest_should_see_basket_link_on_the_main_page							PASSED 								[100%] 


Мы видим, что в первом тест-сьюте браузер запустился один раз, а во втором — два раза.

-----------

ФИКСТУРЫ, ВОЗВРАЩАЮЩИЕ ЗНАЧЕНИЯ

 Мы создадим фикстуру browser, которая будет создавать объект WebDriver. Этот объект мы сможем использовать в тестах для взаимодействия с браузером. Для этого мы напишем метод browser и укажем, что он является фикстурой с помощью декоратора @pytest.fixture. После этого мы можем вызывать фикстуру в тестах, передав ее как параметр. По умолчанию фикстура будет создаваться для каждого тестового метода, то есть для каждого теста запустится свой экземпляр браузера.

						
				@pytest.fixture
				def browser():
				    print("\nstart browser for test..")
				    browser = webdriver.Chrome()
				    return browser


				class TestMainPage1():
				    # вызываем фикстуру в тесте, передав ее как параметр
				    def test_guest_should_see_login_link(self, browser):
				        browser.get(link)
				        browser.find_element_by_css_selector("#login_link")

				    def test_guest_should_see_basket_link_on_the_main_page(self, browser):
				        browser.get(link)
				        browser.find_element_by_css_selector(".basket-mini .btn-group > a")

-------------------------------

FINALYZERS DIRECTLY

https://docs.pytest.org/en/latest/how-to/fixtures.html#adding-finalizers-directly

------------------------------

ОБЛАСТЬ ВИДИМОСТИ SCOPE

Для фикстур можно задавать область покрытия фикстур. Допустимые значения: “function”, “class”, “module”, “session”.


------------------------------

Автоиспользование фикстур
При описании фикстуры можно указать дополнительный параметр autouse=True, который укажет, что фикстуру нужно запустить для каждого теста даже без явного вызова: 


				@pytest.fixture
				def browser():
				    print("\nstart browser for test..")
				    browser = webdriver.Chrome()
				    yield browser
				    print("\nquit browser..")
				    browser.quit()


				@pytest.fixture(autouse=True)
				def prepare_data():
				    print()
				    print("preparing some critical data for every test")


				class TestMainPage1():
				    def test_guest_should_see_login_link(self, browser):
				        # не передаём как параметр фикстуру prepare_data, но она все равно выполняется
				        browser.get(link)
				        browser.find_element_by_css_selector("#login_link")

				    def test_guest_should_see_basket_link_on_the_main_page(self, browser):
				        browser.get(link)
				        browser.find_element_by_css_selector(".basket-mini .btn-group > a")

https://habr.com/ru/company/yandex/blog/242795/
https://docs.pytest.org/en/stable/fixture.html

-------------------------------------------------------------

МАРКИРОВКА ТЕСТОВ ЧАСТЬ 1

Например, мы можем выбрать небольшое количество критичных тестов (smoke), которые нужно запускать на каждый коммит разработчиков, а остальные тесты обозначить как регрессионные (regression) и запускать их только перед релизом. Или у нас могут быть тесты, специфичные для конкретного браузера (internet explorer 11), и мы хотим запускать эти тесты только под данный браузер.

метки (marks). Для маркировки теста нужно написать декоратор вида @pytest.mark.mark_name, где mark_name — произвольная строка.

Давайте разделим тесты в одном из предыдущих примеров на smoke и regression.

test_fixture8.py:

				import pytest
				from selenium import webdriver

				link = "http://selenium1py.pythonanywhere.com/"


				@pytest.fixture(scope="function")
				def browser():
				    print("\nstart browser for test..")
				    browser = webdriver.Chrome()
				    yield browser
				    print("\nquit browser..")
				    browser.quit()


				class TestMainPage1():

				    @pytest.mark.smoke
				    def test_guest_should_see_login_link(self, browser):
				        browser.get(link)
				        browser.find_element_by_css_selector("#login_link")

				    @pytest.mark.regression
				    def test_guest_should_see_basket_link_on_the_main_page(self, browser):
				        browser.get(link)
				        browser.find_element_by_css_selector(".basket-mini .btn-group > a")


Чтобы запустить тест с нужной маркировкой, нужно передать в командной строке параметр -m и нужную метку:

pytest -s -v -m smoke test_fixture8.py


РЕГИСТРАЦИЯ МЕТОК

Создайте файл pytest.ini в корневой директории вашего тестового проекта и добавьте в файл следующие строки:

[pytest]
markers =
    smoke: marker for smoke tests
    regression: marker for regression tests


Так же можно маркировать целый тестовый класс. В этом случае маркировка будет применена ко всем тестовым методам, входящим в класс.

---------------------------------------

ИНВЕРСИЯ МАРКИРОВКИ

Маркировка тестов часть 2
Инверсия
Чтобы запустить все тесты, не имеющие заданную маркировку, можно использовать инверсию. Для запуска всех тестов, не отмеченных как smoke, нужно выполнить команду:

pytest -s -v -m "not smoke" test_fixture8.py
Объединение тестов с разными маркировками
Для запуска тестов с разными метками можно использовать логическое ИЛИ. Запустим smoke и regression-тесты:

pytest -s -v -m "smoke or regression" test_fixture8.py
Выбор тестов, имеющих несколько маркировок
Предположим, у нас есть smoke-тесты, которые нужно запускать только для определенной операционной системы, например, для Windows 10. Зарегистрируем метку win10 в файле pytest.ini, а также добавим к одному из тестов эту метку.

				pytest.ini:

				[pytest]
				markers =
				    smoke: marker for smoke tests
				    regression: marker for regression tests
				    win10


				test_fixture81.py:

				import pytest
				from selenium import webdriver

				link = "http://selenium1py.pythonanywhere.com/"


				@pytest.fixture(scope="function")
				def browser():
				    print("\nstart browser for test..")
				    browser = webdriver.Chrome()
				    yield browser
				    print("\nquit browser..")
				    browser.quit()


				class TestMainPage1:

				    @pytest.mark.smoke
				    def test_guest_should_see_login_link(self, browser):
				        browser.get(link)
				        browser.find_element_by_css_selector("#login_link")

				    @pytest.mark.smoke
				    @pytest.mark.win10
				    def test_guest_should_see_basket_link_on_the_main_page(self, browser):
				        browser.get(link)
				        browser.find_element_by_css_selector(".basket-mini .btn-group > a")


Чтобы запустить только smoke-тесты для Windows 10, нужно использовать логическое И:

pytest -s -v -m "smoke and win10" test_fixture81.py 			# Должен выполнится тест test_guest_should_see_basket_link_on_the_main_page. 


----------------------------------------------------

ПРОПУСК ТЕСТОВ

SKIP

Итак, чтобы пропустить тест, его отмечают в коде как @pytest.mark.skip:


					class TestMainPage1():

					    @pytest.mark.skip
					    def test_guest_should_see_login_link(self, browser):
					        browser.get(link)
					        browser.find_element_by_css_selector("#login_link")

					    def test_guest_should_see_basket_link_on_the_main_page(self, browser):
					        browser.get(link)
					        browser.find_element_by_css_selector(".basket-mini .btn-group > a")

===================================

Alternatively, it is also possible to skip imperatively during test execution or setup by calling the pytest.skip(reason) function:

					def test_function():
					    if not valid_config(): 				# УСЛОВИЕ ДЛЯ ПРОПУСКА ТЕСТА ВО ВРЕМЯ ЕГО ИСПОЛНЕНИЯ
					        pytest.skip("unsupported configuration")

===================================

SKIPIF

					import sys

					@pytest.mark.skipif(sys.version_info < (3, 7), reason="requires python3.7 or higher")
					def test_function():

===================================
					# content of test_mymodule.py
					import mymodule

					minversion = pytest.mark.skipif(
					    mymodule.__versioninfo__ < (1, 1), reason="at least mymodule-1.1 required"
					)

					@minversion
					def test_function():
						    ...
===================================
					import mymodule

					minversion = pytest.mark.skipif(
					    mymodule.__versioninfo__ < (1, 1), reason="at least mymodule-1.1 required"
					)

					@minversion
					def test_function():
					    ...
===================================

SKIP ALL TEST FUNCTIONS OF A CLASS OR MODULE

You can use the skipif marker (as any other marker) on classes:

					@pytest.mark.skipif(sys.platform == "win32", reason="does not run on windows")
					class TestPosixCalls:
					    def test_function(self):
					        "will not be setup or run under 'win32' platform"

If you want to skip ALL TEST FUNCTIONS OF A MODULE, you may use the pytestmark global:

					# test_module.py
					pytestmark = pytest.mark.skipif(...)



----------------------------------------------------

XFAIL: ПОМЕЧАТЬ ТЕСТ КАК ОЖИДАЕМО ПАДАЮЩИЙ

Добавим маркировку @pytest.mark.xfail для падающего теста.

Когда баг починят, мы это узнаем, так как теперь тест будет отмечен как XPASS (“unexpectedly passing” — неожиданно проходит). После этого маркировку xfail для теста можно удалить. Кстати, к маркировке xfail можно добавлять параметр reason. Чтобы увидеть это сообщение в консоли, при запуске нужно добавлять параметр pytest -rx.

				class TestMainPage1:
				    def test_user_should_see_login_link(self, browser):
				        browser.get(link)
				        browser.find_element_by_css_selector("#login_link")

				    def test_user_should_see_basket_link(self, browser):
				        browser.get(link)
				        browser.find_element_by_css_selector(".basket-mini .btn-group > a")

				    @pytest.mark.xfail(reason="fixing bug right now")
				    def test_guest_should_see_search_button_on_the_main_page(self, browser):
				        browser.get(link)
				        browser.find_element_by_css_selector("button.favorite")

				    @pytest.mark.xfail(reason="fixing this bug right now")
				    def test_guest_should_see_search_button_on_the_main_page_fixed(self, browser):
				        browser.get(link)
				        browser.find_element_by_css_selector("input.btn.btn-default")

========================= 2 passed, 1 xfailed, 1 xpassed in 16.49s =========================


pytest -rxXs  # show extra info on xfailed, xpassed, and skipped tests

Alternatively, you can also mark a test as XFAIL from within the test or its setup function imperatively:

				def test_function():
				    if not valid_config():
				        pytest.xfail("failing configuration (but should work)")

=========================================

CONDITION PARAMETER

If a test is only expected to fail under a certain condition, you can pass that condition as the first parameter:

				@pytest.mark.xfail(sys.platform == "win32", reason="bug in a 3rd party library")
				def test_function():
				    ...

REASON PARAMETER

You can specify the motive of an expected failure with the reason parameter:

				@pytest.mark.xfail(reason="known parser issue")
				def test_function():
				    ...

RAISES PARAMETER

If you want to be more specific as to why the test is failing, you can specify a single exception, or a tuple of exceptions, in the raises argument.

				@pytest.mark.xfail(raises=RuntimeError)
				def test_function():
				    ...

EXAMPLES

import pytest

xfail = pytest.mark.xfail

@xfail
def test_hello():
    assert 0

@xfail(run=False)
def test_hello2():
    assert 0

@xfail("hasattr(os, 'sep')")
def test_hello3():
    assert 0

@xfail(reason="bug 110")
def test_hello4():
    assert 0

@xfail('pytest.__version__[0] != "17"')
def test_hello5():
    assert 0

def test_hello6():
    pytest.xfail("reason")

@xfail(raises=IndexError)
def test_hello7():
    x = []
    x[1] = 1



xfail_demo.py xxxxxxx                                                [100%]

========================= short test summary info ==========================
XFAIL xfail_demo.py::test_hello
XFAIL xfail_demo.py::test_hello2
  reason: [NOTRUN]
XFAIL xfail_demo.py::test_hello3
  condition: hasattr(os, 'sep')
XFAIL xfail_demo.py::test_hello4
  bug 110
XFAIL xfail_demo.py::test_hello5
  condition: pytest.__version__[0] != "17"
XFAIL xfail_demo.py::test_hello6
  reason: reason
XFAIL xfail_demo.py::test_hello7
============================ 7 xfailed in 0.12s ============================

--------------------------------------------------------------------------------------------

ПАРАМЕТРИЗАЦИЯ ТЕСТОВ

PyTest позволяет запустить один и тот же тест с разными входными параметрами. Для этого используется декоратор @pytest.mark.parametrize().


import pytest
from selenium import webdriver

@pytest.fixture(scope="function")
def browser():
    print("\nstart browser for test..")
    browser = webdriver.Chrome()
    yield browser
    print("\nquit browser..")
    browser.quit()

@pytest.mark.parametrize('language', ["ru", "en-gb"])
def test_guest_should_see_login_link(browser, language):
    link = f"http://selenium1py.pythonanywhere.com/{language}/"
    browser.get(link)
    browser.find_element_by_css_selector("#login_link")

@pytest.mark.parametrize('language', ["ru", "en-gb"])
class TestLogin:
    def test_guest_should_see_login_link(self, browser, language):
        link = f"http://selenium1py.pythonanywhere.com/{language}/"
        browser.get(link)
        browser.find_element_by_css_selector("#login_link")
        # этот тест запустится 2 раза

    def test_guest_should_see_navbar_element(self, browser, language):
        print(f"language: {language}")
        assert True
        # этот тест тоже запустится дважды


test_fixture_parametrize_12.py::test_guest_should_see_login_link[ru]									PASSED 				[ 16%]
test_fixture_parametrize_12.py::test_guest_should_see_login_link[en-gb] 								PASSED 				[ 33%]
test_fixture_parametrize_12.py::TestLogin::test_guest_should_see_login_link[ru] 						PASSED 				[ 50%]
test_fixture_parametrize_12.py::TestLogin::test_guest_should_see_login_link[en-gb] 						PASSED 				[ 66%]
test_fixture_parametrize_12.py::TestLogin::test_guest_should_see_navbar_element[ru] 					PASSED 				[ 83%]
test_fixture_parametrize_12.py::TestLogin::test_guest_should_see_navbar_element[en-gb] 					PASSED  			[100%]

------------------------------------------------------------------------

CONFTEST.PY — КОНФИГУРАЦИЯ ТЕСТОВ

Для хранения часто употребимых фикстур и хранения глобальных настроек нужно использовать файл conftest.py, который должен лежать в директории верхнего уровня в вашем проекте с тестами. Можно создавать дополнительные файлы conftest.py в других директориях, но тогда настройки в этих файлах будут применяться только к тестам в под-директориях.

conftest.py:

          import pytest
          from selenium import webdriver

          @pytest.fixture(scope="function")
          def browser():
              print("\nstart browser for test..")
              browser = webdriver.Chrome()
              yield browser
              print("\nquit browser..")
              browser.quit()


ОЧЕНЬ ВАЖНО! 
Есть одна важная особенность поведения конфигурационных файлов, о которой вы обязательно должны знать. PyTest автоматически находит и подгружает файлы conftest.py, которые находятся в директории с тестами. Если вы храните все свои скрипты для курса в одной директории, будьте аккуратны и следите, чтобы не возникало ситуации, когда вы запускаете тесты из папки tests:

tests/
├── conftest.py
├── subfolder
│   └── conftest.py
│   └── test_abs.py

следует избегать!
В таком случае применяется ОБА файла conftest.py, что может вести к непредсказуемым ошибкам и конфликтам.  

Таким образом можно переопределять разные фикстуры, но мы в рамках курса рекомендуем придерживаться одного файла на проект/задачу и держать их горизонтально, как-нибудь так: 

selenium_course_solutions/
├── section3
│   └── conftest.py
│   └── test_languages.py
├── section4 
│   └── conftest.py
│   └── test_main_page.py

----------------------------------------------------------------------------------

TEST RERUNNING


				link = "http://selenium1py.pythonanywhere.com/"


				def test_user_should_see_login_link(browser):
				    browser.get(link)
				    browser.find_element_by_css_selector("#login_link")


				def test_user_should_see_fail_link(browser):
				    browser.get(link)
				    browser.find_element_by_css_selector("#magic_link")


pytest -v --tb=line --reruns 1 --browser_name=chrome test_rerun.py  # --reruns 1 Значит один перезапуск в случае падения теста

test_parser.py::test_user_should_see_login_link 																		PASSED[ 50%]
test_parser.py::test_user_should_see_fail_link RERUN[100%]
test_parser.py::test_user_should_see_fail_link FAILED[100%]

-------------------------------------------------------------------------

ЗАПУСК АВТОТЕСТОВ ДЛЯ РАЗНЫХ ЯЗЫКОВ ИНТЕРФЕЙСА

Браузер передает данные о языке пользователя через запросы к серверу, указывая в Headers (заголовке запроса) параметр accept-language. Если сервер получит запрос с заголовком {accept-language: ru, en}, то он отобразит пользователю русскоязычный интерфейс сайта. Если русский язык не поддерживается, то будет показан следующий язык из списка, в данном случае пользователь увидит англоязычный интерфейс. 


add_experimental_option ???????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????


Чтобы указать язык браузера с помощью WebDriver, используйте класс Options и метод add_experimental_option, как указано в примере ниже:

				from selenium.webdriver.chrome.options import Options

				options = Options()
				options.add_experimental_option('prefs', {'intl.accept_languages': user_language})
				browser = webdriver.Chrome(options=options)


Для Firefox объявление нужного языка будет выглядеть немного иначе:

				fp = webdriver.FirefoxProfile()
				fp.set_preference("intl.accept_languages", user_language)
				browser = webdriver.Firefox(firefox_profile=fp)

В конструктор webdriver.Chrome или webdriver.Firefox вы можете добавлять разные аргументы, расширяя возможности тестирования ваших веб-приложений: можно указывать прокси-сервер для контроля сетевого трафика или запускать разные версии браузера, указывая локальный путь к файлу браузера. Предполагаем, что эти возможности вам понадобятся позже и вы сами сможете найти настройки для этих задач.












































